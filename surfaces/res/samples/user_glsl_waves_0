
//
//
// HOLD SHIFT AND CLICK THE SURFACE
// TO INTERACT WITH IT.
//
//

const float PI = 3.1415926535;
float c = 0.5;

vec4 currData  = texture2D(textures[0], (vec2(_x, _y) + vec2(0.5)) / vec2(texDims[0]));
float x_y_t1   = currData.y * 10.0;
float x_y_t0   = texture2D(textures[1], (vec2(_x, _y) + vec2(0.5)) / vec2(texDims[1])).y * 10.0;

float xp1_y_t1 = texture2D(textures[0], (vec2(_x+1,  _y ) + vec2(0.5)) / vec2(texDims[0])).y * 10.0;
float xm1_y_t1 = texture2D(textures[0], (vec2(_x-1,  _y ) + vec2(0.5)) / vec2(texDims[0])).y * 10.0;
float x_yp1_t1 = texture2D(textures[0], (vec2( _x,  _y+1) + vec2(0.5)) / vec2(texDims[0])).y * 10.0;
float x_ym1_t1 = texture2D(textures[0], (vec2( _x,  _y-1) + vec2(0.5)) / vec2(texDims[0])).y * 10.0;

// discrete wave equation
float sum = xp1_y_t1 + xm1_y_t1 + x_yp1_t1 + x_ym1_t1 - 4.0 * x_y_t1;
float x_y_t2 = 2.0 * x_y_t1 - x_y_t0 + c * c * sum * 0.25;

float gaussHeight = 0.0;

// mouse position on plane
if ( fvars[ 2 ] > 0.5 )
{
  vec2  mp = vec2( fvars[ 0 ], fvars[ 1 ] );
  float x = currData.x - mp.x;
  float y = currData.z - mp.y;
  float stdDev = 3.0;
  gaussHeight = 1.0 / ( 2.0 * PI * stdDev * stdDev );
  gaussHeight *= exp( -( x * x + y * y ) / ( 2.0 * stdDev * stdDev ) );
}


data = currData;
data.y = x_y_t2 * 0.0997 + gaussHeight * 2.5;




