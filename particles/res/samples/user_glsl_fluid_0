
vec3 bounds = vec3(3);
float damper = 0.5;
vec3 gravity = vec3(0, -9.8, 0);

vec4 currData = texture2D(textures[0], (vec2(_x, _y) + vec2(0.5)) / vec2(texDims[0]));
vec4 prevData = texture2D(textures[1], (vec2(_x, _y) + vec2(0.5)) / vec2(texDims[1]));

vec3 velocity = (currData.xyz - prevData.xyz) / 0.02;
velocity += gravity * 0.02; // gravity
vec3 deltaVel = velocity * 0.02;
vec3 newPos = currData.xyz + deltaVel;

/* bounds check */
if (newPos.x < -bounds.x)
    newPos.x = -bounds.x;
if (newPos.y < -bounds.y)
    newPos.y = -bounds.y;
if (newPos.z < -bounds.z)
    newPos.z = -bounds.z;
if (newPos.x > bounds.x)
    newPos.x = bounds.x;
if (newPos.y > bounds.y)
    newPos.y = bounds.y;
if (newPos.z > bounds.z)
    newPos.z = bounds.z;

data = vec4(newPos, currData.w);
