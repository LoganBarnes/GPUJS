
const float EPS = 0.001;

const float H = 2.0;       // kernel radius
const float H2 = 4.0;      // H^2
const float POLY6_COEFF = 0.00305992474; // 315 / (64 * pi * H9)
const float SPIKEY_COEFF = 0.22381163872; // 45 / (pi * H6)

const float K_P = 0.1;              // scales artificial pressure
const float E_P = 4.0;              // exponent to art. pressure
const float DQ_P = 0.2;             // between .1 and .3 (for art pressure)

const float RO = 1.0;

vec4 pos = texture2D(textures[0], (vec2(_x, _y) + vec2(0.5)) / vec2(texDims[0]));
float lambda = texture2D(textures[1], (vec2(_x, _y) + vec2(0.5)) / vec2(texDims[1])).x;

vec4 delta = vec4(0.0);
int counter = 0;
int numNeighbors = 0;
vec4 pos2 = vec4(1.0);
float lambda2;

for (int r = 0; r < 32; r++)
{
    for (int c = 0; c < 32; c++)
    {
        if (counter > texDims[1].z)
            break;
        counter++;

        if ( _x == c && _y == r )
        {
            continue;
        }
        
        pos2 = texture2D(textures[0], (vec2(c, r) + vec2(0.5)) / vec2(texDims[0]));
        vec4 r = pos - pos2;
        float rlen2 = dot(r, r);

        if (rlen2 < 2.0) 
        {
            numNeighbors++;
        
            float rlen = sqrt(rlen2);
            float hMinus2 = H2 - rlen2;
            float hMinus = H - rlen;

            vec4 spikeyGrad;
            if (rlen < 0.0001)
                spikeyGrad = vec4(0,EPS,0,0) * -SPIKEY_COEFF * hMinus*hMinus;
            else
                spikeyGrad = (r / rlen) * -SPIKEY_COEFF * hMinus*hMinus;

            float term2 = H2 - (DQ_P * DQ_P * H2);

            float numer = (POLY6_COEFF * hMinus2*hMinus2*hMinus2 ) ;
            float denom = (POLY6_COEFF * term2*term2*term2 );
            float lambdaCorr = -K_P * pow(numer / denom, E_P);

            lambda2 = texture2D(textures[1], (vec2(c, r) + vec2(0.5)) / vec2(texDims[1])).x;

            delta += (lambda + lambda2 + lambdaCorr) * spikeyGrad;
        }
        
    }
    
    if (counter > texDims[1].z)
        break;
}

data = pos + delta * 0.5 / (RO + float(numNeighbors));
data.w = 1.0;

