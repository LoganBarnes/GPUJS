
const float PI = 3.14159265358;

const float H = 2.0;         // kernel radius
const float H2 = H*H;        // H^2
const float H6 = H2*H2*H2;   // H^6
const float H9 = H6*H2*H;    // H^9
const float POLY6_COEFF = 315.0 / (64.0 * PI * H9); // 315 / (64 * pi * H9)
const float SPIKEY_COEFF = 45.0 / (PI * H6); // 45 / (pi * H6)

const float FLUID_RELAXATION = 0.01; // epsilon used when calculating lambda

const float RO = 1.0;

vec4 currData = texture2D(textures[0], (vec2(_x, _y) + vec2(0.5)) / vec2(texDims[0]));
vec3 pos = currData.xyz;

float m = currData.w;

int counter = 0;

vec4 otherParticle;
float ro = 0.0;
vec3 grad = vec3(0.0);
float denom = 0.0;

int r, c;
int width = texDims[1].x;
float widthf = float(width);

for (int i = 0; i < 3000; ++i)
{
    if ( i != _index )
    {
        r = i / width;
        c = int(mod(float(i), widthf));
        
        vec3 pos2 = texture2D(textures[0], (vec2(c, r) + vec2(0.5)) / vec2(texDims[0])).xyz;

        vec3 r = pos - pos2;
        float rlen2 = dot(r, r);
        
        if (rlen2 < H2)
        {
        
            float rlen = sqrt(rlen2);
            float hMinus2 = H2 - rlen2;
            float hMinus = H - rlen;

            // do fluid solid scaling hurr
            ro += (POLY6_COEFF * hMinus2*hMinus2*hMinus2 ) * m;

            vec3 spikeyGrad;
            if (rlen < 0.0001)
                spikeyGrad = vec3(randv(vec2(_x, _y) + r.xy) * 0.001); // randomize a little
            else
                spikeyGrad = (r / rlen) * -SPIKEY_COEFF * hMinus*hMinus;
            spikeyGrad /= RO;

            grad += -spikeyGrad;
            denom += dot(spikeyGrad, spikeyGrad);
        
        }
    }
}

ro += (POLY6_COEFF * H6 ) * m;
denom += dot(grad, grad);

float lambda = - ((ro / RO) - 1.0) / (denom + FLUID_RELAXATION);
        

data = vec4(vec3(lambda), 1);
